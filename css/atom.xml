<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artigos Da Categoria: Css | vid]]></title>
  <link href="http://vid.blog.br/./css/atom.xml" rel="self"/>
  <link href="http://vid.blog.br/"/>
  <updated>2015-05-13T18:53:02-03:00</updated>
  <id>http://vid.blog.br/</id>
  <author>
    <name><![CDATA[Enrique Marques Jr]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Conferência CSS Brasil: Testando Seu CSS]]></title>
    <link href="http://vid.blog.br/css/conferencia-css-brasil-testando-seu-css/"/>
    <updated>2015-05-13T15:23:10-03:00</updated>
    <id>http://vid.blog.br/css/conferencia-css-brasil-testando-seu-css</id>
    <content type="html"><![CDATA[<p>No dia 9 de maio rolou a 1ª Conferência CSS Brasil e vou transformar em posts o que vi por lá! E o primeiro post será sobre a palestra do Eduardo Matos.<!--more--> (<a href="http://pt.slideshare.net/100000187316458/testes-de-css">Slides</a>)</p>

<h2>Pra que testar CSS?</h2>

<p>Num projeto grande, com uma equipe grande e muita coisa rolando ao mesmo tempo, a chance de aparecer erros aumenta muito. Temos diversas práticas para minimizar erros e <strong>testar o CSS nos permite garantir mais uma camada</strong>.</p>

<h2>Formas de testar seu CSS</h2>

<p>Existem várias formas de testar seu CSS, assim como vários tipos de testes:</p>

<h3>CSSLint</h3>

<p><figure>
  <img src="/images/posts/csslint.png" />
</figure></p>

<p>Acredito que seja o mais simples. O <a href="http://csslint.net/">CSSLint</a> vai avaliar as linhas do seu código e te retornar uma lista de possíveis erros (assim como o JSLint).</p>

<p>Podemos usar o CSSLint com algum task runner (grunt) e tornar esse teste bem prático (<a href="https://github.com/CSSLint/csslint/wiki/Build-System-Integration">Informações sobre integração</a>).</p>

<h3>Style Stats</h3>

<p><figure>
  <img src="/images/posts/stylestats.png" />
</figure></p>

<p><a href="http://www.stylestats.org/">Esse cara</a> é mais um feedback do seu CSS. Com ele temos um relatório sobre as regras do seu css, possibilitando visualizar de maneira prática se o arquivo está muito complexo ou tem cores semelhantes que poderiam virar uma única, por exemplo.</p>

<p><em>Também dá pra integrar com o algum task runner.</em></p>

<h2>Testando Layouts</h2>

<p>Essa parte, pra mim, é a mais interessante, garantir de maneira prática que o layout não quebrou é sensacional.</p>

<p>Existem algumas ferramentas para te ajudar nessa tarefa, mas vou falar sobre uma: <a href="http://garris.github.io/BackstopJS/">BackstopJS</a>.</p>

<p>O BackstopJS faz um tipo de teste chamado de “teste de regressão”.</p>

<h3>BackstopJS</h3>

<p><figure>
  <img src="/images/posts/backstopjs.png" />
</figure></p>

<p>Minha ideia aqui não é fazer um tutorial e sim falar sobre as vantagens e desafios de implementar esse tipo de teste no projeto.</p>

<p>O que um teste de regressão faz é - basicamente - tirar prints do layout atual para comparar com uma nova print (já com suas alterações) e caso tenha diferenças entre os prints os testes não vão passar.</p>

<p>O BackstopJS disponibiliza uma interface bem legal, similar ao <a href="http://mochajs.org/">mocha</a> ou <a href="http://jasmine.github.io/">jasmine</a> que já conhecemos.</p>

<p>Eu indico o mesmo <a href="https://css-tricks.com/automating-css-regression-testing/">link que tem no slide</a>. Não é tão simples, mas esse link explica exatamente tudo que você precisa saber para começar a usar e testar seu CSS magicamente.</p>

<h2>Quem deve criar os testes?</h2>

<p>Por mais que a parte do código fique na mão do front-end, o designer também precisa participar dessa camada (na minha opinião). Sua função seria analisar para evitar excessos e em alguns casos até corrigir testes.</p>
]]></content>
  </entry>
  
</feed>
