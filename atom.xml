<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[vid]]></title>
  <link href="http://vid.blog.br/atom.xml" rel="self"/>
  <link href="http://vid.blog.br/"/>
  <updated>2015-03-24T18:14:28-03:00</updated>
  <id>http://vid.blog.br/</id>
  <author>
    <name><![CDATA[Enrique Marques Jr]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone.js: Views]]></title>
    <link href="http://vid.blog.br/javascript/backbone-dot-js-views/"/>
    <updated>2015-03-24T17:39:44-03:00</updated>
    <id>http://vid.blog.br/javascript/backbone-dot-js-views</id>
    <content type="html"><![CDATA[<p>Evitar código &ldquo;macarrão&rdquo;, separar responsabilidades, tratar eventos e atualizar dados vindo do model.<!--more--></p>

<h1>Backbone.View</h1>

<p>No <a href="http://vid.blog.br/javascript/backbone-dot-js-introducao-ao-framework/">primeiro post sobre backbone que eu fiz aqui</a>, falei do básico do básico e não cheguei nem perto de explicar o que a parte de Views pode fazer por você. Agora vamos entrar a fundo nas Views e deixar nosso código <em>lindo de organizado</em> e com fácil entendimento.</p>

<p>Então já sabemos como instanciar uma Backbone.View, agora vamos ver um exemplo de algumas <code>options</code> que ela aceita:</p>

<div><script src='https://gist.github.com/5b1aac933c7fed18cab7.js'></script>
<noscript><pre><code>var View = Backbone.View.extend({
  tagName: &amp;quot;ul&amp;quot;, // Por padrão é gerado uma div, mas podemos colocar outra tag (por exemplo uma &amp;lt;ul&amp;gt;)
  className: &amp;quot;minha-ul&amp;quot;, // Podemos adicioanar uma class ao elemento da view (&amp;lt;ul class=&amp;#39;minha-ul&amp;#39;&amp;gt;&amp;lt;/ul&amp;gt;)
  id: &amp;quot;minha-ul&amp;quot;, // Mesma coisa do className só que para adicionar um id (&amp;lt;ul id=&amp;#39;minha-ul&amp;#39;&amp;gt;&amp;lt;/ul&amp;gt;)
  el: &amp;quot;#principal&amp;quot;, // Se o elemento já esta renderizado na página, podemos passar o el, assim ele não cria um elemento novo
});</code></pre></noscript></div>


<h2>Render</h2>

<p>O método <code>render</code> é basicamente a função que chamamos para renderizar o conteúdo dentro do <code>el</code>:</p>

<div><script src='https://gist.github.com/6201b9d1d2d74c673dd0.js'></script>
<noscript><pre><code>var View = Backbone.View.extend({
  render: function() {
    this.$el.html(&quot;View exemplo&quot;);
    return this;
  }
});</code></pre></noscript></div>


<p>Lembrando que cada view controla somente sua &ldquo;área&rdquo;, então dentro da <code>function</code> render nós sempre trabalhamos com o <code>this.el</code> que é o elemento que a View controla.</p>

<p>Outra coisa legal é que existe um <code>this.$el</code> que &ldquo;herda&rdquo; as funções do jQuery (vamos usar ele).</p>

<p>Para exibir a view agora é temos o retorno da <code>View</code> já com o conteúdo, ou seja, nosso <code>View.el</code> já esta pronto para ser jogado no DOM:</p>

<div><script src='https://gist.github.com/27f8c4f81b4664b34370.js'></script>
<noscript><pre><code>// View = gist 6201b9d1d2d74c673dd0
var view = new View();

view.render(); // Adicionando o conteúdo na view
$(&quot;div&quot;).html(view.el); // Adiciona a view no DOM</code></pre></noscript></div>


<h2>Templates</h2>

<p>Podemos definir um template para a view ao invés de deixar tudo dentro do método <code>render</code>:</p>

<div><script src='https://gist.github.com/45c2c0f1d8afd549a660.js'></script>
<noscript><pre><code>var View = Backbone.View.extend({
  template: _.template(&quot;&lt;h1&gt; Título da View &lt;/h1&gt;&quot;),
  
  render: function() {
    this.$el.html(this.template());
    return this;
  }
});</code></pre></noscript></div>


<p>É usado o <code>_.template</code> do <a href="http://underscorejs.org/#template">underscore.js</a> para gerar o template.</p>

<h2>Events</h2>

<p>A parte de events do backbone.js nós permite controlar eventos do DOM e delega-los para alguma função dentro do escopo da <code>View</code>.</p>

<div><script src='https://gist.github.com/81825fe2f8db21933e76.js'></script>
<noscript><pre><code>var View = Backbone.View.extend({
  events: {
    &quot;click .item&quot;: &quot;clicked&quot;
  },
  
  clicked: function() {
    console.log(&quot;Item clicado&quot;);
  }
});</code></pre></noscript></div>


<p>O objeto events funciona assim:
A <code>key</code> tem o evento seguido do seletor (quando o event é para o <code>el</code> não precisa passar o seletor): Ex. <code>”click .item”</code>.
O <code>value</code> é a função que será chamada quando ocorrer o tal evento: Ex. <code>"clicked"</code>.</p>

<p><a href="http://backbonejs.org/#Events-catalog">Na doc do backbone.js tem uma lista com os eventos que ele ouve.</a></p>

<h1>Trabalhando com dados do model</h1>

<p>Até agora não colocamos nenhuma informação dinâmica na renderização da View, vamos fazer isso agora.</p>

<p>Vamos usar o mesmo esquema do template, só que com algumas alterações no método <code>render</code> e no próprio template (para receber as informações):</p>

<div><script src='https://gist.github.com/d42ed9195b5ba35561f1.js'></script>
<noscript><pre><code>var View = Backbone.View.extend({
  template: _.template(&quot;&lt;h1&gt; &lt;%= title %&gt; &lt;/h1&gt;&quot;),
  
  render: function() {
    this.$el.html(this.template(this.model.attributes));
    return this;
  }
});

var view = new View({
  model: new Backbone.Model({ title: &quot;Título da view&quot; }) // Passando o título pelo model
});

view.render(); // Adiciona o conteúdo da view

console.log(view.el) // Retorna: &lt;h1&gt; Título da view &lt;/h1&gt;
</code></pre></noscript></div>


<p>Simples né?</p>

<h1>E&hellip;</h1>

<p>Tem bastante coisa legal ainda, como <code>attributes</code> defaults para caso a view não receba as variáveis que o template espera, eventos entre views, etc&hellip;</p>

<p>A parte de atualizar, adicionar e remover dados vou deixar para o próximo post: <code>Models &amp; Views</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js: Introdução Ao Framework]]></title>
    <link href="http://vid.blog.br/javascript/backbone-dot-js-introducao-ao-framework/"/>
    <updated>2015-01-30T17:48:53-02:00</updated>
    <id>http://vid.blog.br/javascript/backbone-dot-js-introducao-ao-framework</id>
    <content type="html"><![CDATA[<p>Sem muita mágica, o Backbone.js te ajuda a estruturar melhor seu javascript com conceitos de Models e Views. Além de ajudar a interagir com API’s (backend).<!--more--></p>

<blockquote><p>With Backbone, you represent your data as Models, which can be created, validated, destroyed, and saved to the server. Whenever a UI action causes an attribute of a model to change, the model triggers a &ldquo;change&rdquo; event; all the Views that display the model&rsquo;s state can be notified of the change, so that they are able to respond accordingly, re-rendering themselves with the new information.
(<a href="http://backbonejs.org/">Ref</a>)</p></blockquote>

<h2>Backbone.js</h2>

<p>Normalmente, quando iniciamos uma aplicação ou grande parte fica no backend e o javascript fica responsável por adicionar um efeito ou outro no DOM (plugins de jQuery rs) ou, ainda, consumimos uma API e exibimos (tratamos) as informações no front-end (tudo com jQuery).  Hoje em dia, isso é cada vez mais criticado e técnicas para estruturar melhor o javascript são criadas constantemente (a maioria das vezes com base em conceitos de backend).</p>

<p>É ai que o backbone.js entra, cada <em>View</em> é responsável por sua &ldquo;área&rdquo; dentro do site, evitando aqueles seletores jQuery espalhados pela aplicação toda.</p>

<h3>Partiu codar</h3>

<p>Para começar a usar o backbonejs é bem simples. Para esse post precisamos de um html qualquer que tenha uma div (ou o que você quiser) com o id <code>#main</code> (só porque usei esse id para explicar a parte de Views) e, claro, do backbonejs (que tem dependência do <a href="http://underscorejs.org/">underscore</a>  >= 1.5.0 e jQuery).</p>

<h2>Views</h2>

<p>As Views são responsáveis por exibir informações recebidas do Model e fazer modificações no DOM. A ideia é que para cada “área” do site deve existir uma View responsável por alterar somente o que estiver dentro dessa “área”.</p>

<h3>Backbone.View</h3>

<div><script src='https://gist.github.com/0602bfc1c0d69126faf4.js'></script>
<noscript><pre><code>var View = Backbone.View.extend({
  render: function() {
    this.$el.html(&quot;&lt;p&gt;Backbone View :)&lt;/p&gt;&quot;);
  }
});

var view = new View({el: &quot;#main&quot;});
view.render(); // &lt;p&gt;Backbone View :)&lt;/p&gt;</code></pre></noscript></div>


<p>O que esse código faz é imprimir na tela <code>&lt;p&gt;Backbone View :)&lt;/p&gt;</code>, onde <code>el</code> (<code>#main</code>) é a área que essa View cuida.</p>

<h2>Models</h2>

<p>É parte de representação de dados, que nos permite interagir com API’s, validando, excluindo e gravando dados.</p>

<h3>Backbone.Model</h3>

<div><script src='https://gist.github.com/00bac046d01286796003.js'></script>
<noscript><pre><code>var Model = Backbone.Model.extend({});

var model = new Model({
  name: &quot;João&quot;,
  age: 14
});

model.get(&quot;name&quot;); // &quot;João&quot;
model.get(&quot;age&quot;); // 14

model.set({name: &quot;Mario&quot;});
model.get(&quot;name&quot;); // &quot;Mario&quot;</code></pre></noscript></div>


<p>Está é a maneira mais simples de trabalhar com o Model, usando os métodos <code>get</code> e <code>set</code> para tratar as informações.</p>

<p><em>Num próximo post vou focar mais em como trabalhar com Views e Models em conjunto.</em></p>

<h2>Router &amp; History</h2>

<p>Quando criamos uma aplicação baseada em javascript, perdemos o histórico de ações e navegação que ocorre no browser. Por exemplo, se você tratar via javascript um link que exibe algum conteúdo na tela, você pode perceber que não existe uma maneira de chegar até essa parte da aplicação através de uma url.</p>

<h3>Backbone.Router</h3>

<p>Com a parte de rotas do backbone, podemos basear nossa aplicação por url’s.</p>

<div><script src='https://gist.github.com/d2d0e12c75ffcc5b2ab3.js'></script>
<noscript><pre><code>var Router = Backbone.Router.extend({
  routes: {
    &quot;home&quot;: &quot;home&quot;
  },

  home: function() {
    new View({el: &quot;#main&quot;}).render(); // Inicia a View e chama o metodo render.
  }
});

var router = new Router();</code></pre></noscript></div>


<p>Nesse exemplo, definimos um Router e passamos uma rota <code>home</code> <br /> (ex: <a href="http://endereco/#home">http://endereco/#home</a>) através do objeto <code>routes</code> onde a chave é o caminho e o valor é a função que será invocada quando essa rota for acessada.</p>

<p>Para iniciar as rotas, precisamos chamar a função <code>start</code> do <code>Backbone.History:</code>Backbone.history.start({root: “home&#8221;})` (A opção root define qual rota será a primeira a ser chamada).</p>

<p>E para navegar até uma rota via código temos o método <br /> <code>navigate</code>: <code>router.navigate(“home”, {trigger: true})</code>, onde o primeiro argumento é a rota que você deseja ir e o segundo são options. <br /> A option <code>trigger: true</code> faz o update da url no navegador.</p>

<p>Isso é bem o básico sobre as rotas no backbone. Podemos,  por exemplo, passar uma opção (<code>{pushState: true}</code>) para o <code>Backbone.history.start</code> que remove o <code>#</code>  das url’s habilitando a API de History do HTML5 (que fica muito melhor).</p>

<h2>Collections e outras coisas&hellip;</h2>

<p>Existe muuuita coisa legal no backbone que eu não cheguei nem perto de explicar. Esse post é apenas uma introdução (bem) básica de como podemos começar a usar a estrutura do backbone sem medo.</p>

<p><em>Collections, Models, Views, Router… pretendo criar posts para cada uma dessas partes.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Functions: Boas Práticas E Funções Construtoras]]></title>
    <link href="http://vid.blog.br/javascript/javascript-functions-boas-praticas-e-funcoes-construtoras/"/>
    <updated>2014-10-08T19:18:00-03:00</updated>
    <id>http://vid.blog.br/javascript/javascript-functions-boas-praticas-e-funcoes-construtoras</id>
    <content type="html"><![CDATA[<p>Criar uma função é muito fácil, é só aprender a sintaxe básica e mandar bala, mas pra que? Vamos aprender o básico sobre esse assunto com uma pequena introdução sobre como utilizar funções em javascript.<!--more--></p>

<blockquote><p>Generally speaking, a function is a &ldquo;subprogram&rdquo; that can be called by code external (or internal in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function, and the function can return a value. (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions">Ref</a>)</p></blockquote>

<h2>Criando UMA função:</h2>

<p>O primeiro ponto que procuro pensar é em criar funções que façam uma única coisa.</p>

<p>Um exemplo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">getFullName</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="nx">name</span> <span class="o">+</span> <span class="err">“</span> <span class="err">“</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Forma de invocar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">getFullName</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span><span class="err">”</span><span class="p">);</span> <span class="c1">// “Nome Sobrenome&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Funções em Objetos</h2>

<p>No javascript, praticamente, tudo é um objeto e um objeto pode ter funções:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">getFullName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">name</span> <span class="o">+</span> <span class="err">“</span> <span class="err">“</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A forma de invocar a função é bem simples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">myObject</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span><span class="err">”</span><span class="p">);</span> <span class="c1">// “Nome Sobrenome&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tomando alguns cuidados</h3>

<p>Quando chamamos a função acima deixamos fácil a quebra de encapsulamento e permitimos a alteração do atributo <code>getFullName</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Alterando o valor de getFullName:</span>
</span><span class='line'><span class="nx">myObject</span><span class="p">.</span><span class="nx">getFullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="err">“</span><span class="nx">Nome</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Chamando a função:</span>
</span><span class='line'><span class="nx">myObject</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span><span class="err">”</span><span class="p">);</span> <span class="c1">// “Nome&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pra resolver isso, podemos criar uma função de forma que ela mantenha suas variáveis dentro do seu escopo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="nx">name</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">last</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>               <span class="k">return</span> <span class="nx">first</span> <span class="o">+</span> <span class="err">“</span> <span class="err">“</span> <span class="o">+</span> <span class="nx">last</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>     <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para chamar essa função é mais ou menos assim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">fullName</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span><span class="err">”</span><span class="p">).</span><span class="nx">get</span><span class="p">();</span> <span class="c1">// “Nome Sobrenome&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Não existe a melhor forma, mas é um exemplo de como retornar somente a função e não permitir a alteração dos atributos como no último exemplo.</p>

<h3>Organizando seu código</h3>

<p>Vale lembrar a importância que existe em organizar seu código.
No front-end existem as camadas de <code>HTML</code>, <code>CSS</code> e <code>Javascript</code> e não devemos misturar responsabilidades de uma camada com a outra.</p>

<p>Porém, ainda encontramos isso hoje em dia:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">“#”</span> <span class="na">style=</span><span class="s">“color:</span> <span class="na">red</span><span class="err">”</span> <span class="na">onClick=</span><span class="s">“clickFunction()”</span><span class="nt">&gt;</span>Link<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Em uma linha temos html, css e javascript. <em>Isso é bem ruim</em>.</p>

<h2>Funções construtoras</h2>

<p>Existe o conceito de orientação a objeto no javascript e funções construtoras é uma parte.
Podemos chamar uma função com <code>new</code> na frente e isso instancia essa função e executa seu construtor. Mais ou menos assim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Chamando a função com new</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span> <span class="mi">2</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span> <span class="mi">2</span><span class="err">”</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ao fazer isso, guardamos o retorno do construtor na variável <code>person</code> e, através dela, podemos acessar as variáveis que foram criadas dentro do construtor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// “Nome”</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span><span class="p">);</span> <span class="c1">// “Sobrenome”</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// “Nome 2”</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">lastName</span><span class="p">);</span> <span class="c1">// “Sobrenome 2&quot; </span>
</span></code></pre></td></tr></table></div></figure>


<p>Uma boa prática é que esse tipo de função comece com letra maiúscula, como se fosse uma classe em outras linguagens.
<strong>PS. No EcmaScript 6 (ES6 Harmony) teremos um <code>class</code> :).</strong></p>

<h3>Criando funções usando prototype</h3>

<p>No exemplo acima, poderíamos criar uma função direto dentro do construtor, mas não é uma boa ideia, pois para cada nova instancia as funções seriam criadas novamente. Um exemplo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">getFullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="err">“</span> <span class="err">“</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'>     <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span> <span class="mi">2</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span> <span class="mi">2</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">();</span> <span class="c1">// “Nome Sobrenome&quot;</span>
</span><span class='line'><span class="nx">person2</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">();</span> <span class="c1">// “Nome2 Sobrenome2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Feito assim, temos uma função <code>getFullName</code> na variável <code>person</code> e outra na variável <code>person2</code>. Usando <code>prototype</code> a função será criada dentro do objeto <code>Person</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getFullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="err">“</span> <span class="err">“</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span> <span class="mi">2</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span> <span class="mi">2</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">();</span> <span class="c1">// “Nome Sobrenome&quot;</span>
</span><span class='line'><span class="nx">person2</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">();</span> <span class="c1">// “Nome2 Sobrenome2&quot; </span>
</span></code></pre></td></tr></table></div></figure>


<p>Tranquilo, né?</p>

<h2>Ufa&hellip;</h2>

<p>Existem diversas formas de trabalhar com funções em javascript e vou me aprofundar em algumas durante a vida deste blog. Por hora, aprendemos como criar e chamar uma função das maneiras mais comuns (e simples) e vale lembrar a importância de avaliar como você vai organizar seu código, não tem uma forma “certa”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Começando a Criar O Tema Do Blog]]></title>
    <link href="http://vid.blog.br/frameworks/octopress-comecando-a-criar-o-tema-do-blog/"/>
    <updated>2014-09-29T02:03:40-03:00</updated>
    <id>http://vid.blog.br/frameworks/octopress-comecando-a-criar-o-tema-do-blog</id>
    <content type="html"><![CDATA[<p>Quando comecei a ideia do blog já tinha em mente criar um tema para poder disponibilizar e com o Octopress é lindo de fazer isso.
Além do tema, pensei em disponibilizar tudo que fosse criando no blog, neste post vou mostrar como criei o tema e como estou usando ele aqui.<!--more--></p>

<h2>Sobre o Octopress</h2>

<p><a href="http://octopress.org/">Octopress</a> é um framework por cima do <a href="http://jekyllrb.com/">Jekyll</a>, que é um gerador de páginas estáticas em Ruby, que resumindo, permite a criação de um blog somente com HTML, CSS, e Javascript. O que o octopress faz é auxiliar (basicamente por rake tasks) nas tarefas de criar novos posts, páginas e principalmente fazer deploy.
Criar um blog com octopress é muito simples, basta seguir os passos da <a href="http://octopress.org/docs/">documentação do site</a> que é sucesso.</p>

<p>Aqui no blog estou usando o <a href="https://pages.github.com/">github pages</a> como “hospedagem” e o próprio octopress tem uma task para fazer deploy lá.</p>

<h2>Criando um tema para Octopress</h2>

<p>Vamos logo ao assunto principal, né?!
Criar um tema no octopress é relativamente simples, mas é claro, se você quiser disponibilizar de maneira legal de usar (que é o ideal) a história muda, mas não muito.
É o que eu estou começando a fazer com o tema aqui do blog.</p>

<p>Criar o tema em si é bem simples, da para usar o tema <code>classic</code> (que é o default) como base e editar os arquivos das pastas <code>sass</code> e <code>source</code>. Quando finalizar o tema, o ideal é colocar essas duas pastas em <code>.theme/nome_do_tema</code> para poder, de fato, instalá-lo no seu blog com os comandos <code>rake install[nome_do_tema]</code> e <code>rake generate</code>. Com o próprio exemplo do tema padrão da pra aprender e qualquer coisa é só olhar as <a href="https://github.com/Shopify/liquid/wiki">docs do liquid</a>, a “markup language”, usada no Jekyll.</p>

<p>Simples, né?</p>

<h2>EMD Theme</h2>

<figure>
<img src="http://vid.blog.br/images/posts/emd-theme-preview.png" />
</figure>


<p>EMD Theme é o nome que dei ao tema do blog, o design é inspirado no <a href="http://medium.com">Medium</a> e os <a href="https://github.com/vidblog/emd-theme-layout">PDS’s estão em um repositório separado</a>.</p>

<p>Já o tema está <a href="https://github.com/vidblog/emd-theme"><strong>aqui</strong></a> e para instalar existe alguns passos a mais que o normal, mas pretendo organizar ainda.</p>

<p>O tema foi pensado para ser focado no texto, sem muita coisa. Tem o básico para entregar o conteúdo com qualidade de leitura.</p>

<p>A graça de fazer o tema é ele ser usado em outros blogs, o que - por enquanto - não é 100% indicado, pois estou criando muitas coisas novas nele em pouco tempo e também organizando tudo. Mas quem quiser, já pode dar palpites e principalmente ajudar. É só criar um <strong>pull request</strong>. :)</p>

<p>Ainda falta bastante coisa que eu quero adicionar e junto com o tema algumas rakes tasks e configurações no Octopress.</p>

<p>Vou falar mais sobre Octopress e Jekyll e deixar o tema completo para uso.</p>

<p>Abraços!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[console.warn("Hello World")]]></title>
    <link href="http://vid.blog.br/about/console-dot-warn-hello-world/"/>
    <updated>2014-09-25T00:04:47-03:00</updated>
    <id>http://vid.blog.br/about/console-dot-warn-hello-world</id>
    <content type="html"><![CDATA[<p>Toma essa então!</p>

<p>Só me apresentando <em>rapidex</em>, me chamo Enrique, tenho 23 anos e trabalho com web a alguns anos.<!--more--></p>

<h2>E…</h2>

<p>Finalmente estou aqui, depois de ter a ideia de criar o blog mais ou menos há 7 meses atrás :(.
Falando em ideia, vamos lá:</p>

<p>Quando comecei a trabalhar com web logo criei um blog para postar tudo de novo que eu vinha descobrindo. Durou relativamente bastante, até que eu precisei dedicar meu tempo a outras coisas e por fim parei de postar. Postei em outros blogs durante um tempo, mas sempre com a ideia de voltar a postar em meu blog.</p>

<p>Hoje, minha ideia continua a mesma… postar coisas que descubro, compartilhar conhecimento e principalmente transformar isso em um meio de comunicação entre eu e pessoas que eu ainda não conheço. Existe muita gente que manda bem hoje em dia e meu objetivo é que esse conteúdo chegue tanto em pessoas que estão iniciando quanto em pessoas que tem conhecimento para debater os assuntos postados.</p>

<h2>Porque?</h2>

<p>Acredito que publicar conteúdo é uma das maneiras mais eficazes (e mais &ldquo;prazerosas&rdquo;) de aprender. Em segundo, quero passar tudo que aprendi para o máximo de pessoas possíveis.</p>

<h2>Resumindo</h2>

<p>Quero contribuir com o máximo de conteúdo possível sobre HTML, CSS e Javascript, com um pouco sobre SEO, algo de back-end ou qualquer outra coisa relacionada a desenvolvimento e web.</p>

<p>Ah, o nome? é div ao contrário. Sim, eu sei que…. enfim.</p>
]]></content>
  </entry>
  
</feed>
