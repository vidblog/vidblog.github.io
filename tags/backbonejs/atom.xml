<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artigos sobre: backbonejs | vid]]></title>
  <link href="http://vid.blog.br/tags/backbonejs/atom.xml" rel="self"/>
  <link href="http://vid.blog.br/"/>
  <updated>2015-03-24T18:08:22-03:00</updated>
  <id>http://vid.blog.br/</id>
  <author>
    <name><![CDATA[Enrique Marques Jr]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone.js: Views]]></title>
    <link href="http://vid.blog.br/javascript/backbone-dot-js-views/"/>
    <updated>2015-03-24T17:39:44-03:00</updated>
    <id>http://vid.blog.br/javascript/backbone-dot-js-views</id>
    <content type="html"><![CDATA[<p>Evitar código &ldquo;macarrão&rdquo;, separar responsabilidades, tratar eventos e atualizar dados vindo do model.<!--more--></p>

<h1>Backbone.View</h1>

<p>No <a href="/javascript/backbone-dot-js-introducao-ao-framework/">primeiro post sobre backbone que eu fiz aqui</a>, falei do básico do básico e não cheguei nem perto de explicar o que a parte de Views pode fazer por você. Agora vamos entrar a fundo nas Views e deixar nosso código <em>lindo de organizado</em> e com fácil entendimento.</p>

<p>Então já sabemos como instanciar uma Backbone.View, agora vamos ver um exemplo de algumas <code>options</code> que ela aceita:</p>

<p><div><script src='https://gist.github.com/5b1aac933c7fed18cab7.js'></script>
<noscript><pre><code>var View = Backbone.View.extend({
  tagName: &amp;quot;ul&amp;quot;, // Por padrão é gerado uma div, mas podemos colocar outra tag (por exemplo uma &amp;lt;ul&amp;gt;)
  className: &amp;quot;minha-ul&amp;quot;, // Podemos adicioanar uma class ao elemento da view (&amp;lt;ul class=&amp;#39;minha-ul&amp;#39;&amp;gt;&amp;lt;/ul&amp;gt;)
  id: &amp;quot;minha-ul&amp;quot;, // Mesma coisa do className só que para adicionar um id (&amp;lt;ul id=&amp;#39;minha-ul&amp;#39;&amp;gt;&amp;lt;/ul&amp;gt;)
  el: &amp;quot;#principal&amp;quot;, // Se o elemento já esta renderizado na página, podemos passar o el, assim ele não cria um elemento novo
});</code></pre></noscript></div>
</p>

<h2>Render</h2>

<p>O método <code>render</code> é basicamente a função que chamamos para renderizar o conteúdo dentro do <code>el</code>:</p>

<p><div><script src='https://gist.github.com/6201b9d1d2d74c673dd0.js'></script>
<noscript><pre><code>var View = Backbone.View.extend({
  render: function() {
    this.$el.html(&quot;View exemplo&quot;);
    return this;
  }
});</code></pre></noscript></div>
</p>

<p>Lembrando que cada view controla somente sua &ldquo;área&rdquo;, então dentro da <code>function</code> render nós sempre trabalhamos com o <code>this.el</code> que é o elemento que a View controla.</p>

<p>Outra coisa legal é que existe um <code>this.$el</code> que &ldquo;herda&rdquo; as funções do jQuery (vamos usar ele).</p>

<p>Para exibir a view agora é temos o retorno da <code>View</code> já com o conteúdo, ou seja, nosso <code>View.el</code> já esta pronto para ser jogado no DOM:</p>

<p><div><script src='https://gist.github.com/27f8c4f81b4664b34370.js'></script>
<noscript><pre><code>// View = gist 6201b9d1d2d74c673dd0
var view = new View();

view.render(); // Adicionando o conteúdo na view
$(&quot;div&quot;).html(view.el); // Adiciona a view no DOM</code></pre></noscript></div>
</p>

<h2>Templates</h2>

<p>Podemos definir um template para a view ao invés de deixar tudo dentro do método <code>render</code>:</p>

<p><div><script src='https://gist.github.com/45c2c0f1d8afd549a660.js'></script>
<noscript><pre><code>var View = Backbone.View.extend({
  template: _.template(&quot;&lt;h1&gt; Título da View &lt;/h1&gt;&quot;),
  
  render: function() {
    this.$el.html(this.template());
    return this;
  }
});</code></pre></noscript></div>
</p>

<p>É usado o <code>_.template</code> do <a href="http://underscorejs.org/#template">underscore.js</a> para gerar o template.</p>

<h2>Events</h2>

<p>A parte de events do backbone.js nós permite controlar eventos do DOM e delega-los para alguma função dentro do escopo da <code>View</code>.</p>

<p><div><script src='https://gist.github.com/81825fe2f8db21933e76.js'></script>
<noscript><pre><code>var View = Backbone.View.extend({
  events: {
    &quot;click .item&quot;: &quot;clicked&quot;
  },
  
  clicked: function() {
    console.log(&quot;Item clicado&quot;);
  }
});</code></pre></noscript></div>
</p>

<p>O objeto events funciona assim:
A <code>key</code> tem o evento seguido do seletor (quando o event é para o <code>el</code> não precisa passar o seletor): Ex. <code>”click .item”</code>.
O <code>value</code> é a função que será chamada quando ocorrer o tal evento: Ex. <code>"clicked"</code>.</p>

<p><a href="http://backbonejs.org/#Events-catalog">Na doc do backbone.js tem uma lista com os eventos que ele ouve.</a></p>

<h1>Trabalhando com dados do model</h1>

<p>Até agora não colocamos nenhuma informação dinâmica na renderização da View, vamos fazer isso agora.</p>

<p>Vamos usar o mesmo esquema do template, só que com algumas alterações no método <code>render</code> e no próprio template (para receber as informações):</p>

<p><div><script src='https://gist.github.com/d42ed9195b5ba35561f1.js'></script>
<noscript><pre><code>var View = Backbone.View.extend({
  template: _.template(&quot;&lt;h1&gt; &lt;%= title %&gt; &lt;/h1&gt;&quot;),
  
  render: function() {
    this.$el.html(this.template(this.model.attributes));
    return this;
  }
});

var view = new View({
  model: new Backbone.Model({ title: &quot;Título da view&quot; }) // Passando o título pelo model
});

view.render(); // Adiciona o conteúdo da view

console.log(view.el) // Retorna: &lt;h1&gt; Título da view &lt;/h1&gt;
</code></pre></noscript></div>
</p>

<p>Simples né?</p>

<h1>E&hellip;</h1>

<p>Tem bastante coisa legal ainda, como <code>attributes</code> defaults para caso a view não receba as variáveis que o template espera, eventos entre views, etc&hellip;</p>

<p>A parte de atualizar, adicionar e remover dados vou deixar para o próximo post: <code>Models &amp; Views</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js: Introdução ao framework]]></title>
    <link href="http://vid.blog.br/javascript/backbone-dot-js-introducao-ao-framework/"/>
    <updated>2015-01-30T17:48:53-02:00</updated>
    <id>http://vid.blog.br/javascript/backbone-dot-js-introducao-ao-framework</id>
    <content type="html"><![CDATA[<p>Sem muita mágica, o Backbone.js te ajuda a estruturar melhor seu javascript com conceitos de Models e Views. Além de ajudar a interagir com API’s (backend).<!--more--></p>

<blockquote><p>With Backbone, you represent your data as Models, which can be created, validated, destroyed, and saved to the server. Whenever a UI action causes an attribute of a model to change, the model triggers a &ldquo;change&rdquo; event; all the Views that display the model&rsquo;s state can be notified of the change, so that they are able to respond accordingly, re-rendering themselves with the new information.
(<a href="http://backbonejs.org/">Ref</a>)</p></blockquote>

<h2>Backbone.js</h2>

<p>Normalmente, quando iniciamos uma aplicação ou grande parte fica no backend e o javascript fica responsável por adicionar um efeito ou outro no DOM (plugins de jQuery rs) ou, ainda, consumimos uma API e exibimos (tratamos) as informações no front-end (tudo com jQuery).  Hoje em dia, isso é cada vez mais criticado e técnicas para estruturar melhor o javascript são criadas constantemente (a maioria das vezes com base em conceitos de backend).</p>

<p>É ai que o backbone.js entra, cada <em>View</em> é responsável por sua &ldquo;área&rdquo; dentro do site, evitando aqueles seletores jQuery espalhados pela aplicação toda.</p>

<h3>Partiu codar</h3>

<p>Para começar a usar o backbonejs é bem simples. Para esse post precisamos de um html qualquer que tenha uma div (ou o que você quiser) com o id <code>#main</code> (só porque usei esse id para explicar a parte de Views) e, claro, do backbonejs (que tem dependência do <a href="http://underscorejs.org/">underscore</a>  >= 1.5.0 e jQuery).</p>

<h2>Views</h2>

<p>As Views são responsáveis por exibir informações recebidas do Model e fazer modificações no DOM. A ideia é que para cada “área” do site deve existir uma View responsável por alterar somente o que estiver dentro dessa “área”.</p>

<h3>Backbone.View</h3>

<p><div><script src='https://gist.github.com/0602bfc1c0d69126faf4.js'></script>
<noscript><pre><code>var View = Backbone.View.extend({
  render: function() {
    this.$el.html(&quot;&lt;p&gt;Backbone View :)&lt;/p&gt;&quot;);
  }
});

var view = new View({el: &quot;#main&quot;});
view.render(); // &lt;p&gt;Backbone View :)&lt;/p&gt;</code></pre></noscript></div>
</p>

<p>O que esse código faz é imprimir na tela <code>&lt;p&gt;Backbone View :)&lt;/p&gt;</code>, onde <code>el</code> (<code>#main</code>) é a área que essa View cuida.</p>

<h2>Models</h2>

<p>É parte de representação de dados, que nos permite interagir com API’s, validando, excluindo e gravando dados.</p>

<h3>Backbone.Model</h3>

<p><div><script src='https://gist.github.com/00bac046d01286796003.js'></script>
<noscript><pre><code>var Model = Backbone.Model.extend({});

var model = new Model({
  name: &quot;João&quot;,
  age: 14
});

model.get(&quot;name&quot;); // &quot;João&quot;
model.get(&quot;age&quot;); // 14

model.set({name: &quot;Mario&quot;});
model.get(&quot;name&quot;); // &quot;Mario&quot;</code></pre></noscript></div>
</p>

<p>Está é a maneira mais simples de trabalhar com o Model, usando os métodos <code>get</code> e <code>set</code> para tratar as informações.</p>

<p><em>Num próximo post vou focar mais em como trabalhar com Views e Models em conjunto.</em></p>

<h2>Router &amp; History</h2>

<p>Quando criamos uma aplicação baseada em javascript, perdemos o histórico de ações e navegação que ocorre no browser. Por exemplo, se você tratar via javascript um link que exibe algum conteúdo na tela, você pode perceber que não existe uma maneira de chegar até essa parte da aplicação através de uma url.</p>

<h3>Backbone.Router</h3>

<p>Com a parte de rotas do backbone, podemos basear nossa aplicação por url’s.</p>

<p><div><script src='https://gist.github.com/d2d0e12c75ffcc5b2ab3.js'></script>
<noscript><pre><code>var Router = Backbone.Router.extend({
  routes: {
    &quot;home&quot;: &quot;home&quot;
  },

  home: function() {
    new View({el: &quot;#main&quot;}).render(); // Inicia a View e chama o metodo render.
  }
});

var router = new Router();</code></pre></noscript></div>
</p>

<p>Nesse exemplo, definimos um Router e passamos uma rota <code>home</code> <br /> (ex: <a href="http://endereco/#home">http://endereco/#home</a>) através do objeto <code>routes</code> onde a chave é o caminho e o valor é a função que será invocada quando essa rota for acessada.</p>

<p>Para iniciar as rotas, precisamos chamar a função <code>start</code> do <code>Backbone.History:</code>Backbone.history.start({root: “home&#8221;})` (A opção root define qual rota será a primeira a ser chamada).</p>

<p>E para navegar até uma rota via código temos o método <br /> <code>navigate</code>: <code>router.navigate(“home”, {trigger: true})</code>, onde o primeiro argumento é a rota que você deseja ir e o segundo são options. <br /> A option <code>trigger: true</code> faz o update da url no navegador.</p>

<p>Isso é bem o básico sobre as rotas no backbone. Podemos,  por exemplo, passar uma opção (<code>{pushState: true}</code>) para o <code>Backbone.history.start</code> que remove o <code>#</code>  das url’s habilitando a API de History do HTML5 (que fica muito melhor).</p>

<h2>Collections e outras coisas&hellip;</h2>

<p>Existe muuuita coisa legal no backbone que eu não cheguei nem perto de explicar. Esse post é apenas uma introdução (bem) básica de como podemos começar a usar a estrutura do backbone sem medo.</p>

<p><em>Collections, Models, Views, Router… pretendo criar posts para cada uma dessas partes.</em></p>
]]></content>
  </entry>
  
</feed>
