<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artigos sobre: css | vid]]></title>
  <link href="http://vid.blog.br/tags/css/atom.xml" rel="self"/>
  <link href="http://vid.blog.br/"/>
  <updated>2015-05-13T18:36:20-03:00</updated>
  <id>http://vid.blog.br/</id>
  <author>
    <name><![CDATA[Enrique Marques Jr]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Conferência CSS Brasil: Testando seu CSS]]></title>
    <link href="http://vid.blog.br/css/conferencia-css-brasil-testando-seu-css/"/>
    <updated>2015-05-13T15:23:10-03:00</updated>
    <id>http://vid.blog.br/css/conferencia-css-brasil-testando-seu-css</id>
    <content type="html"><![CDATA[<p>No dia 9 de maio rolou a 1ª Conferência CSS Brasil e vou transformar em posts o que vi por lá! E o primeiro post será sobre a palestra do Eduardo Matos.<!--more--> (<a href="http://pt.slideshare.net/100000187316458/testes-de-css">Slides</a>)</p>

<h2>Pra que testar CSS?</h2>

<p>Num projeto grande, com uma equipe grande e muita coisa rolando ao mesmo tempo, a chance de aparecer erros aumenta muito. Temos diversas práticas para minimizar erros e <strong>testar o CSS nos permite garantir mais uma camada</strong>.</p>

<h2>Formas de testar seu CSS</h2>

<p>Existem várias formas de testar seu CSS, assim como vários tipos de testes:</p>

<h3>CSSLint</h3>

<p><figure>
  <img src="/images/posts/csslint.png" />
</figure></p>

<p>Acredito que seja o mais simples. O <a href="http://csslint.net/">CSSLint</a> vai avaliar as linhas do seu código e te retornar uma lista de possíveis erros (assim como o JSLint).</p>

<p>Podemos usar o CSSLint com algum task runner (grunt) e tornar esse teste bem prático (<a href="https://github.com/CSSLint/csslint/wiki/Build-System-Integration">Informações sobre integração</a>).</p>

<h3>Style Stats</h3>

<p><figure>
  <img src="/images/posts/stylestats.png" />
</figure></p>

<p><a href="http://www.stylestats.org/">Esse cara</a> é mais um feedback do seu CSS. Com ele temos um relatório sobre as regras do seu css, possibilitando visualizar de maneira prática se o arquivo está muito complexo ou tem cores semelhantes que poderiam virar uma única, por exemplo.</p>

<p><em>Também dá pra integrar com o algum task runner.</em></p>

<h2>Testando Layouts</h2>

<p>Essa parte, pra mim, é a mais interessante, garantir de maneira prática que o layout não quebrou é sensacional.</p>

<p>Existem algumas ferramentas para te ajudar nessa tarefa, mas vou falar sobre uma: <a href="http://garris.github.io/BackstopJS/">BackstopJS</a>.</p>

<p>O BackstopJS faz um tipo de teste chamado de “teste de regressão”.</p>

<h3>BackstopJS</h3>

<p><figure>
  <img src="/images/posts/backstopjs.png" />
</figure></p>

<p>Minha ideia aqui não é fazer um tutorial e sim falar sobre as vantagens e desafios de implementar esse tipo de teste no projeto.</p>

<p>O que um teste de regressão faz é - basicamente - tirar prints do layout atual para comparar com uma nova print (já com suas alterações) e caso tenha diferenças entre os prints os testes não vão passar.</p>

<p>O BackstopJS disponibiliza uma interface bem legal, similar ao <a href="http://mochajs.org/">mocha</a> ou <a href="http://jasmine.github.io/">jasmine</a> que ja conhecemos.</p>

<p>Eu indico o mesmo <a href="https://css-tricks.com/automating-css-regression-testing/">link que tem no slide</a>. Não é tão simples, mas esse link explica exatamente tudo que você precisa saber para começar a usar e testar seu CSS magicamente.</p>

<h2>Quem deve criar os testes?</h2>

<p>Por mais que a parte do código fique na mão do front-end, o designer também precisa participar dessa camada (na minha opinião). Sua função seria analisar para evitar excessos e em alguns casos até corrigir testes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Começando a criar o tema do blog]]></title>
    <link href="http://vid.blog.br/frameworks/octopress-comecando-a-criar-o-tema-do-blog/"/>
    <updated>2014-09-29T02:03:40-03:00</updated>
    <id>http://vid.blog.br/frameworks/octopress-comecando-a-criar-o-tema-do-blog</id>
    <content type="html"><![CDATA[<p>Quando comecei a ideia do blog já tinha em mente criar um tema para poder disponibilizar e com o Octopress é lindo de fazer isso.
Além do tema, pensei em disponibilizar tudo que fosse criando no blog, neste post vou mostrar como criei o tema e como estou usando ele aqui.<!--more--></p>

<h2>Sobre o Octopress</h2>

<p><a href="http://octopress.org/">Octopress</a> é um framework por cima do <a href="http://jekyllrb.com/">Jekyll</a>, que é um gerador de páginas estáticas em Ruby, que resumindo, permite a criação de um blog somente com HTML, CSS, e Javascript. O que o octopress faz é auxiliar (basicamente por rake tasks) nas tarefas de criar novos posts, páginas e principalmente fazer deploy.
Criar um blog com octopress é muito simples, basta seguir os passos da <a href="http://octopress.org/docs/">documentação do site</a> que é sucesso.</p>

<p>Aqui no blog estou usando o <a href="https://pages.github.com/">github pages</a> como “hospedagem” e o próprio octopress tem uma task para fazer deploy lá.</p>

<h2>Criando um tema para Octopress</h2>

<p>Vamos logo ao assunto principal, né?!
Criar um tema no octopress é relativamente simples, mas é claro, se você quiser disponibilizar de maneira legal de usar (que é o ideal) a história muda, mas não muito.
É o que eu estou começando a fazer com o tema aqui do blog.</p>

<p>Criar o tema em si é bem simples, da para usar o tema <code>classic</code> (que é o default) como base e editar os arquivos das pastas <code>sass</code> e <code>source</code>. Quando finalizar o tema, o ideal é colocar essas duas pastas em <code>.theme/nome_do_tema</code> para poder, de fato, instalá-lo no seu blog com os comandos <code>rake install[nome_do_tema]</code> e <code>rake generate</code>. Com o próprio exemplo do tema padrão da pra aprender e qualquer coisa é só olhar as <a href="https://github.com/Shopify/liquid/wiki">docs do liquid</a>, a “markup language”, usada no Jekyll.</p>

<p>Simples, né?</p>

<h2>EMD Theme</h2>

<p><figure>
<img src="/images/posts/emd-theme-preview.png" />
</figure></p>

<p>EMD Theme é o nome que dei ao tema do blog, o design é inspirado no <a href="http://medium.com">Medium</a> e os <a href="https://github.com/vidblog/emd-theme-layout">PDS’s estão em um repositório separado</a>.</p>

<p>Já o tema está <a href="https://github.com/vidblog/emd-theme"><strong>aqui</strong></a> e para instalar existe alguns passos a mais que o normal, mas pretendo organizar ainda.</p>

<p>O tema foi pensado para ser focado no texto, sem muita coisa. Tem o básico para entregar o conteúdo com qualidade de leitura.</p>

<p>A graça de fazer o tema é ele ser usado em outros blogs, o que - por enquanto - não é 100% indicado, pois estou criando muitas coisas novas nele em pouco tempo e também organizando tudo. Mas quem quiser, já pode dar palpites e principalmente ajudar. É só criar um <strong>pull request</strong>. :)</p>

<p>Ainda falta bastante coisa que eu quero adicionar e junto com o tema algumas rakes tasks e configurações no Octopress.</p>

<p>Vou falar mais sobre Octopress e Jekyll e deixar o tema completo para uso.</p>

<p>Abraços!</p>
]]></content>
  </entry>
  
</feed>
