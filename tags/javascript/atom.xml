<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artigos sobre: javascript | vid]]></title>
  <link href="http://vid.blog.br/tags/javascript/atom.xml" rel="self"/>
  <link href="http://vid.blog.br/"/>
  <updated>2014-10-15T01:44:10-03:00</updated>
  <id>http://vid.blog.br/</id>
  <author>
    <name><![CDATA[Enrique Marques Jr]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript functions: boas práticas e funções construtoras]]></title>
    <link href="http://vid.blog.br/javascript/javascript-functions-boas-praticas-e-funcoes-construtoras/"/>
    <updated>2014-10-08T19:18:00-03:00</updated>
    <id>http://vid.blog.br/javascript/javascript-functions-boas-praticas-e-funcoes-construtoras</id>
    <content type="html"><![CDATA[<p>Criar uma função é muito fácil, é só aprender a sintaxe básica e mandar bala, mas pra que? Vamos aprender o básico sobre esse assunto com uma pequena introdução sobre como utilizar funções em javascript.<!--more--></p>

<blockquote><p>Generally speaking, a function is a &ldquo;subprogram&rdquo; that can be called by code external (or internal in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function, and the function can return a value. (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions">Ref</a>)</p></blockquote>

<h2>Criando UMA função:</h2>

<p>O primeiro ponto que procuro pensar é em criar funções que façam uma única coisa.</p>

<p>Um exemplo:
<code>js
function getFullName(name, lastName) {
     return name + “ “ + lastName;
}
</code></p>

<p>Forma de invocar:
<code>js
getFullName(“Nome”, “Sobrenome”); // “Nome Sobrenome"
</code></p>

<h2>Funções em Objetos</h2>

<p>No javascript, praticamente, tudo é um objeto e um objeto pode ter funções:
<code>js
var myObject = {
     getFullName: function(name, lastName) {
          return name + “ “ + lastName;
     }
}
</code></p>

<p>A forma de invocar a função é bem simples:
<code>js
myObject.getFullName(“Nome”, “Sobrenome”); // “Nome Sobrenome"
</code></p>

<h3>Tomando alguns cuidados</h3>

<p>Quando chamamos a função acima deixamos fácil a quebra de encapsulamento e permitimos a alteração do atributo <code>getFullName</code>:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Alterando o valor de getFullName:</span>
</span><span class='line'><span class="nx">myObject</span><span class="p">.</span><span class="nx">getFullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="err">“</span><span class="nx">Nome</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Chamando a função:</span>
</span><span class='line'><span class="nx">myObject</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span><span class="err">”</span><span class="p">);</span> <span class="c1">// “Nome&quot;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Pra resolver isso, podemos criar uma função de forma que ela mantenha suas variáveis dentro do seu escopo:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="nx">name</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">last</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span> <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="nx">first</span> <span class="o">+</span> <span class="err">“</span> <span class="err">“</span> <span class="o">+</span> <span class="nx">last</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'> <span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Para chamar essa função é mais ou menos assim:
<code>js
fullName(“Nome”, “Sobrenome”).get(); // “Nome Sobrenome"
</code></p>

<p>Não existe a melhor forma, mas é um exemplo de como retornar somente a função e não permitir a alteração dos atributos como no último exemplo.</p>

<h3>Organizando seu código</h3>

<p>Vale lembrar a importância que existe em organizar seu código.
No front-end existem as camadas de <code>HTML</code>, <code>CSS</code> e <code>Javascript</code> e não devemos misturar responsabilidades de uma camada com a outra.</p>

<p>Porém, ainda encontramos isso hoje em dia:
<code>html
&lt;a href=“#” style=“color: red” onClick=“clickFunction()”&gt;Link&lt;/a&gt;
</code></p>

<p>Em uma linha temos html, css e javascript. <em>Isso é bem ruim</em>.</p>

<h2>Funções construtoras</h2>

<p>Existe o conceito de orientação a objeto no javascript e funções construtoras é uma parte.
Podemos chamar uma função com <code>new</code> na frente e isso instancia essa função e executa seu construtor. Mais ou menos assim:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Chamando a função com new</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span> <span class="mi">2</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span> <span class="mi">2</span><span class="err">”</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Ao fazer isso, guardamos o retorno do construtor na variável <code>person</code> e, através dela, podemos acessar as variáveis que foram criadas dentro do construtor:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// “Nome”</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span><span class="p">);</span> <span class="c1">// “Sobrenome”&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// “Nome 2”</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">lastName</span><span class="p">);</span> <span class="c1">// “Sobrenome 2&quot;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Uma boa prática é que esse tipo de função comece com letra maiúscula, como se fosse uma classe em outras linguagens.
<strong>PS. No EcmaScript 6 (ES6 Harmony) teremos um <code>class</code> :).</strong></p>

<h3>Criando funções usando prototype</h3>

<p>No exemplo acima, poderíamos criar uma função direto dentro do construtor, mas não é uma boa ideia, pois para cada nova instancia as funções seriam criadas novamente. Um exemplo:</p>

<pre><code class="js">var Person = function(name, lastName) {
     this.name = name;
     this.lastName = lastName;
     this.getFullName = function() {
          return this.name + “ “ + this.lastName;
     };
}; 

var person = new Person(“Nome”, “Sobrenome”);
var person2 = new Person(“Nome 2”, “Sobrenome 2”);

person.getFullName(); // “Nome Sobrenome"
person2.getFullName(); // “Nome2 Sobrenome2"
</code></pre>

<p>Feito assim, temos uma função <code>getFullName</code> na variável <code>person</code> e outra na variável <code>person2</code>. Usando <code>prototype</code> a função será criada dentro do objeto <code>Person</code>:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getFullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="err">“</span> <span class="err">“</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="err">“</span><span class="nx">Nome</span> <span class="mi">2</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="nx">Sobrenome</span> <span class="mi">2</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">person</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">();</span> <span class="c1">// “Nome Sobrenome&quot;</span>
</span><span class='line'><span class="nx">person2</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">();</span> <span class="c1">// “Nome2 Sobrenome2&quot;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Tranquilo, né?</p>

<h2>Ufa&hellip;</h2>

<p>Existem diversas formas de trabalhar com funções em javascript e vou me aprofundar em algumas durante a vida deste blog. Por hora, aprendemos como criar e chamar uma função das maneiras mais comuns (e simples) e vale lembrar a importância de avaliar como você vai organizar seu código, não tem uma forma “certa”.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress: Começando a criar o tema do blog]]></title>
    <link href="http://vid.blog.br/frameworks/octopress-comecando-a-criar-o-tema-do-blog/"/>
    <updated>2014-09-29T02:03:40-03:00</updated>
    <id>http://vid.blog.br/frameworks/octopress-comecando-a-criar-o-tema-do-blog</id>
    <content type="html"><![CDATA[<p>Quando comecei a ideia do blog já tinha em mente criar um tema para poder disponibilizar e com o Octopress é lindo de fazer isso.
Além do tema, pensei em disponibilizar tudo que fosse criando no blog, neste post vou mostrar como criei o tema e como estou usando ele aqui.<!--more--></p>

<h2>Sobre o Octopress</h2>

<p><a href="http://octopress.org/">Octopress</a> é um framework por cima do <a href="http://jekyllrb.com/">Jekyll</a>, que é um gerador de páginas estáticas em Ruby, que resumindo, permite a criação de um blog somente com HTML, CSS, e Javascript. O que o octopress faz é auxiliar (basicamente por rake tasks) nas tarefas de criar novos posts, páginas e principalmente fazer deploy.
Criar um blog com octopress é muito simples, basta seguir os passos da <a href="http://octopress.org/docs/">documentação do site</a> que é sucesso.</p>

<p>Aqui no blog estou usando o <a href="https://pages.github.com/">github pages</a> como “hospedagem” e o próprio octopress tem uma task para fazer deploy lá.</p>

<h2>Criando um tema para Octopress</h2>

<p>Vamos logo ao assunto principal, né?!
Criar um tema no octopress é relativamente simples, mas é claro, se você quiser disponibilizar de maneira legal de usar (que é o ideal) a história muda, mas não muito.
É o que eu estou começando a fazer com o tema aqui do blog.</p>

<p>Criar o tema em si é bem simples, da para usar o tema <code>classic</code> (que é o default) como base e editar os arquivos das pastas <code>sass</code> e <code>source</code>. Quando finalizar o tema, o ideal é colocar essas duas pastas em <code>.theme/nome_do_tema</code> para poder, de fato, instalá-lo no seu blog com os comandos <code>rake install[nome_do_tema]</code> e <code>rake generate</code>. Com o próprio exemplo do tema padrão da pra aprender e qualquer coisa é só olhar as <a href="https://github.com/Shopify/liquid/wiki">docs do liquid</a>, a “markup language”, usada no Jekyll.</p>

<p>Simples, né?</p>

<h2>EMD Theme</h2>

<p><figure>
<img src="/images/posts/emd-theme-preview.png" alt="EMD Theme Screenshot" />
</figure></p>

<p>EMD Theme é o nome que dei ao tema do blog, o design é inspirado no <a href="http://medium.com">Medium</a> e os <a href="https://github.com/vidblog/emd-theme-layout">PDS’s estão em um repositório separado</a>.</p>

<p>Já o tema está <a href="https://github.com/vidblog/emd-theme"><strong>aqui</strong></a> e para instalar existe alguns passos a mais que o normal, mas pretendo organizar ainda.</p>

<p>O tema foi pensado para ser focado no texto, sem muita coisa. Tem o básico para entregar o conteúdo com qualidade de leitura.</p>

<p>A graça de fazer o tema é ele ser usado em outros blogs, o que - por enquanto - não é 100% indicado, pois estou criando muitas coisas novas nele em pouco tempo e também organizando tudo. Mas quem quiser, já pode dar palpites e principalmente ajudar. É só criar um <strong>pull request</strong>. :)</p>

<p>Ainda falta bastante coisa que eu quero adicionar e junto com o tema algumas rakes tasks e configurações no Octopress.</p>

<p>Vou falar mais sobre Octopress e Jekyll e deixar o tema completo para uso.</p>

<p>Abraços!</p>
]]></content>
  </entry>
  
</feed>
